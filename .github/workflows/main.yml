name: Pull and Save Docker Images

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  process-images:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.body, 'images:') || contains(github.event.comment.body, 'images:')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract images from issue
      id: extract-images
      run: |
        # 获取 issue body 或 comment body
        if [ "${{ github.event_name }}" = "issues" ]; then
          ISSUE_BODY="${{ github.event.issue.body }}"
        else
          ISSUE_BODY="${{ github.event.comment.body }}"
        fi
        
        # 将 issue body 写入文件
        echo "$ISSUE_BODY" > issue_body.txt
        
        # 提取 YAML 部分并解析
        python3 << 'EOF'
        import yaml
        import re
        import os
        
        # 读取 issue body
        with open('issue_body.txt', 'r') as f:
            content = f.read()
        
        # 查找 images: 开始的 YAML 块
        yaml_match = re.search(r'images:\s*\n((?:\s*-\s+image:.*\n\s*tag:.*\n?)+)', content, re.MULTILINE)
        
        if yaml_match:
            yaml_content = "images:\n" + yaml_match.group(1)
            try:
                data = yaml.safe_load(yaml_content)
                images = data.get('images', [])
                
                # 生成镜像列表
                image_list = []
                for img in images:
                    image_name = img.get('image')
                    tag = img.get('tag', 'latest')
                    full_image = f"{image_name}:{tag}"
                    image_list.append(full_image)
                
                # 输出到 GitHub Actions 环境变量
                with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                    f.write(f"images={','.join(image_list)}\n")
                    f.write(f"count={len(image_list)}\n")
                
                print(f"Found {len(image_list)} images:")
                for img in image_list:
                    print(f"  - {img}")
                    
            except yaml.YAMLError as e:
                print(f"YAML parsing error: {e}")
                exit(1)
        else:
            print("No valid images YAML found in issue")
            exit(1)
        EOF

    - name: Pull and save Docker images
      if: steps.extract-images.outputs.images != ''
      run: |
        IFS=',' read -ra IMAGES <<< "${{ steps.extract-images.outputs.images }}"
        
        mkdir -p docker-images
        
        for image in "${IMAGES[@]}"; do
          echo "Pulling image: $image"
          docker pull "$image"
          
          # 创建安全的文件名（替换特殊字符）
          safe_name=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
          
          echo "Saving image: $image as $safe_name.tar"
          docker save "$image" -o "docker-images/${safe_name}.tar"
          
          # 压缩以减小文件大小
          gzip "docker-images/${safe_name}.tar"
          
          echo "Saved: docker-images/${safe_name}.tar.gz"
        done
        
        # 显示保存的文件
        ls -lah docker-images/

    - name: Create archive info
      if: steps.extract-images.outputs.images != ''
      run: |
        echo "# Docker Images Archive" > archive-info.md
        echo "" >> archive-info.md
        echo "## Images included:" >> archive-info.md
        
        IFS=',' read -ra IMAGES <<< "${{ steps.extract-images.outputs.images }}"
        for image in "${IMAGES[@]}"; do
          safe_name=$(echo "$image" | sed 's/[^a-zA-Z0-9._-]/_/g')
          echo "- \`$image\` → \`${safe_name}.tar.gz\`" >> archive-info.md
        done
        
        echo "" >> archive-info.md
        echo "## Usage:" >> archive-info.md
        echo "```bash" >> archive-info.md
        echo "# Download and extract" >> archive-info.md
        echo "gunzip filename.tar.gz" >> archive-info.md
        echo "docker load -i filename.tar" >> archive-info.md
        echo "```" >> archive-info.md

    - name: Upload Docker images as artifacts
      if: steps.extract-images.outputs.images != ''
      uses: actions/upload-artifact@v4
      with:
        name: docker-images-${{ github.event.issue.number }}-${{ github.run_number }}
        path: |
          docker-images/
          archive-info.md
        retention-days: 30

    - name: Comment on issue with download link
      if: steps.extract-images.outputs.images != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const archiveInfo = fs.readFileSync('archive-info.md', 'utf8');
          
          const comment = `## ✅ Docker Images Ready!
          
          I've successfully pulled and saved **${{ steps.extract-images.outputs.count }}** Docker images from your request.
          
          ${archiveInfo}
          
          ### 📥 Download Link:
          You can download the images from the [Actions artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          **Artifact name:** \`docker-images-${{ github.event.issue.number }}-${{ github.run_number }}\`
          
          ### 🔧 How to use:
          1. Download the artifact zip file
          2. Extract it to get the individual \`.tar.gz\` files
          3. For each image:
             \`\`\`bash
             gunzip image-name.tar.gz
             docker load -i image-name.tar
             \`\`\`
          
          ---
          *Generated by GitHub Actions run #${{ github.run_number }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
